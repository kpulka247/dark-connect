name: Build, Release and Publish

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      is_new_release: ${{ steps.semantic_dry_run.outputs.new_release_published == 'true' }}
      version: ${{ steps.semantic_dry_run.outputs.new_release_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for new release (dry run)
        id: semantic_dry_run
        run: npx semantic-release --dry-run -e .releaserc.dryrun.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build Extension
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.is_new_release == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update manifest files and build project
        run: |
          node ./scripts/update-manifest-version.js ${{ needs.prepare.outputs.version }}
          npm run build
        env:
          EXTENSION_VERSION: ${{ needs.prepare.outputs.version }}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-artifacts
          path: |
            dist/
            public/manifest.*.json

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: extension-artifacts
          
      - name: Create release
        run: npx semantic-release -e .releaserc.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish to Stores
    runs-on: ubuntu-latest
    needs: release
    
    steps:
      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: extension-artifacts
          path: dist

      - name: Publish to Chrome Web Store
        run: |
          npx chrome-webstore-upload-cli upload \
            --source dist/darkconnect-*-chrome.zip \
            --extension-id $CHROME_EXTENSION_ID \
            --client-id $CHROME_CLIENT_ID \
            --client-secret $CHROME_CLIENT_SECRET \
            --refresh-token $CHROME_REFRESH_TOKEN \
            --auto-publish
        env:
          CHROME_EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
          CHROME_CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
          CHROME_CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
          CHROME_REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}

      - name: Publish to Firefox AMO
        run: |
          npx web-ext sign \
            --source-dir=dist/darkconnect-firefox \
            --artifacts-dir=dist/web-ext-artifacts \
            --channel=listed \
            --no-input
        env:
          WEB_EXT_API_KEY: ${{ secrets.AMO_JWT_ISSUER }}
          WEB_EXT_API_SECRET: ${{ secrets.AMO_JWT_SECRET }}